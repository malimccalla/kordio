// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String                @id @default(uuid())
  name           String?
  givenName      String?               @map("given_name")
  familyName     String?               @map("family_name")
  email          String?               @unique
  picture        String?
  locale         String?
  gender         String?
  userSocial     UserSocial[]
  savedCompanies UsersSavedCompanies[]

  @@map("users")
}

model Company {
  id           String                  @id @default(uuid())
  name         String
  slug         String                  @unique
  contactEmail String?                 @map("contact_email")
  phoneNumber  String?                 @map("phone_number")
  website      String?
  address      String?
  note         String?
  description  String?
  categories   CategoriesOnCompanies[]
  savedByUsers UsersSavedCompanies[]

  @@map("companies")
}

model UserSocial {
  user     User   @relation(fields: [userId], references: [id])
  userId   String @map("user_id")
  socialId String @unique @map("social_id")
  provider String

  @@id([userId, socialId])
  @@map("user_socials")
}

model Category {
  id        String                  @id @default(uuid())
  name      String
  color     String?
  companies CategoriesOnCompanies[]

  @@map("categories")
}

model CategoriesOnCompanies {
  company    Company  @relation(fields: [companyId], references: [id])
  companyId  String   @map("company_id") // relation scalar field (used in the `@relation` attribute above)
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String   @map("category_id") // relation scalar field (used in the `@relation` attribute above)

  @@id([companyId, categoryId])
  @@map("categories_on_companies")
}

model UsersSavedCompanies {
  company   Company @relation(fields: [companyId], references: [id])
  companyId String  @map("company_id") // relation scalar field (used in the `@relation` attribute above)
  user      User    @relation(fields: [userId], references: [id])
  userId    String  @map("user_id") // relation scalar field (used in the `@relation` attribute above)

  @@id([companyId, userId])
  @@map("users_saved_companies")
}
